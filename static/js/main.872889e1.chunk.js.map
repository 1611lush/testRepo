{"version":3,"sources":["layout/Header.tsx","layout/Footer.tsx","data/config.tsx","components/CardDaily.tsx","components/CardPast.tsx","components/InnerPast.tsx","components/InnerDaily.tsx","layout/Empty.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Footer","API_KEY","BASE_URL","cities","CardDaily","props","React","cityText","setCityText","cityNames","elem","push","isShown","setIsShown","isActive","setActive","toggleClass","title","onClick","event","map","apiRequest","CardPast","urlPast","choosenDay","setChoosenDay","latInput","setLatInput","lonInput","setLonInput","maxDate","Date","toISOString","split","fiveDay","now","minDate","lat","lon","type","placeholder","name","min","max","onChange","e","target","formattedDate","parseInt","getTime","toFixed","makeRequestDate","value","defaultValue","InnerPast","dateFormated","dataResult","toLocaleString","monthName","finalDate","src","alt","InnerDaily","weatherProps","monthNames","i","length","Math","random","margin","setMargin","toSrart","style","marginLeft","Empty","App","error","setError","errorPast","setErrorPast","dataDaily","setDataDaily","dataPast","setDataPast","datesArr","tempArr","iconArr","url","fetch","then","response","ok","statusText","json","result","daily","dt","round","temp","day","weather","icon","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.872889e1.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\n\r\nconst Header = () => (\r\n  <header className=\"header\">\r\n\t    <h1 className=\"header__text\">\r\n\t    \t<span className=\"header__title header__title_left\">Weather</span>\r\n\t    \t<span className=\"header__title header__title_right\">forecast</span>\r\n    \t</h1>\r\n  </header>\r\n)\r\n\r\nexport default Header\r\n","import * as React from 'react';\r\n\r\n\r\nconst Footer = () => (\r\n    <footer className=\"footer\">\r\n\t    C ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT\r\n    </footer>\r\n)\r\n\r\nexport default Footer","export const API_KEY: string =  '536c5078bfa32aff06e5cce728dc5f42'\r\nexport const BASE_URL: string = 'https://api.openweathermap.org/'\r\nexport const cities = [\r\n  [\r\n    \"Samara\", 53.195873, 50.100193\r\n  ],\r\n  [    \r\n    \"Tolyatti\", 53.507836, 49.420393\r\n  ],\r\n  [    \r\n    \"Saratov\", 51.533557, 46.034257\r\n  ],\r\n  [    \r\n    \"Kazan\", 55.796127, 49.106405\r\n  ],\r\n  [    \r\n    \"Krasnodar\", 45.035470, 38.975313\r\n  ]\r\n]\r\n","import * as React from 'react';\r\nimport {API_KEY, BASE_URL} from '../data/config';\r\n\r\n\r\n\r\ninterface CardProps {\r\n\ttitle: string,\r\n\tcities: any,\r\n\tapiRequest: (url: string) => void\r\n}\r\n\r\n\r\nconst CardDaily: React.FC<CardProps> = (props: CardProps) => {\r\n\r\n\tconst urlDaily = 'data/2.5/onecall?'\r\n\tconst [cityText, setCityText] =  React.useState('Select city')\r\n\r\n\tconst cityNames:any = []\r\n\tfor (const elem of props.cities) {\t\t\r\n    \tcityNames.push(elem)\t\t\r\n\t}\r\n\r\n\tconst [isShown, setIsShown] = React.useState(false);\r\n\tconst toggleCities = () => setIsShown(!isShown);\r\n\r\n \tconst [isActive, setActive] =  React.useState(false);\r\n\tconst toggleClass = () => {\r\n\t    setActive(!isActive);\r\n    };\r\n\t\r\n\r\n  \treturn(\r\n\r\n\t\t<React.Fragment>\r\n\r\n\t\t\t<h3 className=\"forecast__title\">\r\n\t\t        {props.title}\r\n\t\t    </h3>\r\n\t\t\t\t \t    \r\n\r\n\t\t\t<div className={isActive ? 'forecast__select forecast__select-up': 'forecast__select'} >\r\n\t\t\t\r\n\t\t\t\t<span onClick={\t\t          \t\t\t\t\t\t\t\r\n\t\t\t\t\t\t(event: any) => {\r\n\t\t\t\t\t\t\ttoggleCities()\r\n\t\t\t\t\t\t\ttoggleClass() \t\t\t\t\t\t\t\t         \t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\t          \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}>\r\n\t\t\t\t\t{cityText}\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t{isShown &&\r\n\t\t\t\t\t<ul className=\"forecast__cities\">\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t{cityNames.map((elem: any) => {\r\n\r\n\t          \t\t\t\t\treturn (\r\n\t          \t\t\t\t\t\t<li key={elem[0]} \r\n\t\t          \t\t\t\t\t\tonClick={\t\t          \t\t\t\t\t\t\t\r\n\t\t          \t\t\t\t\t\t\t(event: any) => {\r\n\t\t          \t\t\t\t\t\t\t\t \r\n\t\t          \t\t\t\t\t\t\t\tsetCityText(elem[0])\t\r\n\t\t          \t\t\t\t\t\t\t\tsetIsShown(!isShown)\r\n\t\t          \t\t\t\t\t\t\t\ttoggleClass() \r\n\t\t          \t\t\t\t\t\t\t\tprops.apiRequest(`${BASE_URL}${urlDaily}lat=${elem[1]}&lon=${elem[2]}&exclude=current,minutely,hourly,alerts&appid=${API_KEY}&units=metric`)\t\t\t\t\t\t         \t\t\t\t\t\t\t\r\n\t          \t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t         \t\t\t\t\t\t\t\r\n\t          \t\t\t\t\t\t\t\t}\t          \t\t\t\t\t\t\t\t\r\n          \t\t\t\t\t\t\t\t}>{elem[0]}\r\n\t          \t\t\t\t\t\t</li>\r\n\t          \t\t\t\t\t)\t\t\t\t\t\t\r\n\t\t\t\t\t            \r\n\t\t\t\t\t        })\t\t\t\r\n\t\t\t\t\t\t}\r\n\r\n\t\t            </ul>\r\n\t\t\t    }\r\n\r\n\t\t\t</div>\t\t\t    \r\n\r\n\t\t</ React.Fragment>\r\n\t\r\n\t)          \r\n\r\n}\r\n\r\nexport default CardDaily","import * as React from 'react';\r\nimport {API_KEY, BASE_URL} from '../data/config';\r\n\r\n\r\n\r\ninterface CardProps {\r\n\ttitle: string,\t\r\n\tcities: any,\t\r\n\tapiRequest: (url:string) => void\r\n}\r\n\r\n\r\nconst CardPast: React.FC<CardProps> = (props: CardProps) => {\r\n\r\n\tconst urlPast = 'data/2.5/onecall/timemachine?'\r\n\tconst [cityText, setCityText] =  React.useState('Select city')\r\n\r\n\tconst cityNames:any = []\r\n\tfor (const elem of props.cities) {\t\t\r\n    \tcityNames.push(elem)\t\t\r\n\t}\r\n\r\n\tconst [isShown, setIsShown] = React.useState(false);\r\n\tconst toggleCities = () => setIsShown(!isShown);\r\n\r\n\r\n \tconst [isActive, setActive] =  React.useState(false);\r\n\tconst toggleClass = () => {\r\n\t    setActive(!isActive);\r\n    };\r\n\t\r\n\r\n\tconst [choosenDay, setChoosenDay] = React.useState<any>(null)\r\n\r\n\tconst [latInput, setLatInput] = React.useState('')\r\n\tconst [lonInput, setLonInput] = React.useState('')\r\n\t\r\n\tconst makeRequestDate = (target: string) => {\r\n\t\tconst formattedDate = parseInt((new Date(target).getTime() / 1000).toFixed(0))\r\n\t\tsetChoosenDay(formattedDate)\r\n\t    props.apiRequest(`${BASE_URL}${urlPast}lat=${latInput}&lon=${lonInput}&dt=${formattedDate}&appid=${API_KEY}&units=metric`)\t\t\t\t\t         \t\t\t\t\t\t\t          \t\t\t\r\n\t}\r\n\tconst makeRequest = (lat: string, lon: string) => {\t\t\r\n\t\tchoosenDay && props.apiRequest(`${BASE_URL}${urlPast}lat=${lat}&lon=${lon}&dt=${choosenDay}&appid=${API_KEY}&units=metric`)\t\r\n\t}\r\n\r\n\tconst maxDate = new Date().toISOString().split(\"T\")[0]\r\n\tconst fiveDay = Date.now() - 432000000\r\n\tconst minDate = new Date(fiveDay).toISOString().split(\"T\")[0]\r\n\r\n\t\r\n  \treturn(\r\n\r\n\t\t<React.Fragment>\r\n\t\t\t<h3 className=\"forecast__title\">\r\n\t\t        {props.title}\r\n\t\t    </h3>\r\n\t\t\t \t\t    \r\n\r\n\t\t\t<div className=\"forecast__inputs\">\r\n\t\t\t\t<div className={isActive ? 'forecast__select forecast__select-up': 'forecast__select'} >\r\n\t\t\r\n\t\t\t\t\t<span onClick={\t\t          \t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t(event: any) => {\r\n\t\t\t\t\t\t\t\ttoggleCities()\r\n\t\t\t\t\t\t\t\ttoggleClass() \t\t\t\t\t\t\t\t         \t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\t          \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t{cityText}\r\n\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t{isShown &&\r\n\t\t\t\t\t\t<ul className=\"forecast__cities\">\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\t{cityNames.map((elem: any) => {\r\n\r\n\t          \t\t\t\t\treturn (\r\n\t          \t\t\t\t\t\t<li key={elem[0]} \r\n\t\t          \t\t\t\t\t\tonClick={\t\t          \t\t\t\t\t\t\t\r\n\t\t          \t\t\t\t\t\t\t(event: any) => {\r\n\t\t          \t\t\t\t\t\t\t\tsetCityText(elem[0])\t\r\n\t\t          \t\t\t\t\t\t\t\tsetIsShown(!isShown)\r\n\t\t          \t\t\t\t\t\t\t\ttoggleClass() \r\n\t\t          \t\t\t\t\t\t\t\tsetLatInput(elem[1])\r\n\t\t          \t\t\t\t\t\t\t\tsetLonInput(elem[2])\r\n\t\t          \t\t\t\t\t\t\t\tmakeRequest(elem[1], elem[2])\r\n\t\t          \t\t\t\t\t\t\t\t\t\t\t\t    \t\t\r\n\t          \t\t\t\t\t\t\t\t}\t          \t\t\t\t\t\t\t\t\r\n\t          \t\t\t\t\t\t\t}>{elem[0]} </li>\r\n\t\t          \t\t\t\t\t)\t\t\t\t\t\t\r\n\t\t\t\t\t\t            \r\n\t\t\t\t\t\t        })\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t            </ul>\r\n\t\t\t        }\r\n\r\n\t\t\t\t</div>\t\t\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"forecast__calendar\" >\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"date\" \r\n\t\t\t\t\t\tplaceholder=\"Select date\"  \r\n\t\t\t\t\t\tname=\"datePast\" \r\n\t\t\t\t\t\tclassName=\"forecast__input\" \r\n\t\t\t\t\t\t//api rule: only 5 days in past\r\n\t\t\t\t  \t\tmin={minDate} \r\n\t\t\t\t  \t\tmax={maxDate}\r\n\t\t\t\t    \tonChange={(e) => {\t\t    \t\t\t\r\n\t    \t\t\t\t\tmakeRequestDate(e.target.value)\r\n\t\t\t\t    \t}}\r\n\t\t\t\t    \tdefaultValue={''}\r\n\t\t\t\t\t/>\t\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\t\r\n\r\n\t\t</ React.Fragment>\r\n\t)          \r\n\r\n}\r\n\r\nexport default CardPast","import * as React from 'react';\r\n\r\ninterface InnerPastProps {\r\n   \tdataResult?: any\r\n}\r\n\r\n\r\n\r\nconst InnerPast: React.FC<InnerPastProps> = (props: InnerPastProps) => {\r\n\tconst monthNames: string[] = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"decr\"];\r\n\tconst dateFormated = new Date(props.dataResult[0]*1000).toLocaleString(\"en-US\").split(\",\")[0]\t\r\n\tconst monthName: any = dateFormated.split(\"/\")[0]\r\n\tconst finalDate: string = (dateFormated.split(\"/\")[1] + ' ' + monthNames[monthName - 1] + ' ' + dateFormated.split(\"/\")[2])\r\n\r\n\r\n\treturn(\t\r\n\r\n\t\t\t<div className=\"forecast__result forecast__result_full\">\t\t\t\t\t\t\r\n\t\t\t\t<p className=\"forecast__date\">{finalDate}  </p>\t\r\n\t\t\t\t<img src={`http://openweathermap.org/img/wn/${props.dataResult[2]}@2x.png`}  alt=\"\" className=\"forecast__img\" />\r\n\t\t    \t<p className=\"forecast__temp\">+{props.dataResult[1]}°</p>\r\n\t    \t</div>\t\r\n\r\n\t)\r\n}\r\n\t\r\n\r\nexport default InnerPast","import * as React from 'react';\r\n\r\ninterface InnerDailyProps {\r\n   \tdataResult?: any\r\n}\r\n\r\n\r\n\r\nconst InnerDaily: React.FC<InnerDailyProps> = (props: InnerDailyProps) => {\r\n\tconst weatherProps:any = []\r\n\tconst monthNames: string[] = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"decr\"];\r\n\r\n\tfor (var i = 0; i < props.dataResult[0].length; i++) { \r\n\t\tconst dateFormated = new Date(props.dataResult[0][i]*1000).toLocaleString(\"en-US\").split(\",\")[0]\t\r\n\t\tconst monthName: any = dateFormated.split(\"/\")[0]\r\n\t\tconst finalDate: string = (dateFormated.split(\"/\")[1] + ' ' + monthNames[monthName - 1] + ' ' + dateFormated.split(\"/\")[2])\r\n\r\n        weatherProps.push(\r\n\t       \t<div className=\"forecast__result forecast__result_full\" key={Math.random()}>\r\n\t\t    \t<h4 className=\"forecast__date\">{finalDate}</h4>\r\n\t\t    \t<img src={`http://openweathermap.org/img/wn/${props.dataResult[2][i]}@2x.png`} alt=\"\" className=\"forecast__img \" />\r\n\t\t    \t<p className=\"forecast__temp\">+{props.dataResult[1][i]}°</p>\r\n\t\t    </div>\r\n\r\n\t\t) \r\n\t}\r\n  \t\r\n\tconst [margin, setMargin] = React.useState(0);\r\n\tconst toSrart = () => {\r\n\t\tif (margin === 0) setMargin(-183)\t\t\r\n\t\tif (margin <= -915) setMargin(0)\r\n\t}\t\r\n\r\n\treturn(\t\r\n\t\t\r\n\t\t   \t<div className=\"slider\">\r\n\r\n\t\t   \t\t{margin !== 0 && <span className=\"slider__btn slider__left\" \r\n\t\t   \t\t\tonClick={\t\t          \t\t\t\t\t\t\t\r\n\t\t\t          \t(event: any) => {\r\n\t\t\t          \t\tsetMargin(margin + 183)\t\t\t\t    \t\t\r\n\t\t\t\t    \t\ttoSrart()\r\n\t\t\t\t    \t}\r\n\t\t\t\t    }></span>\r\n\t\t\t\t}\t\t\t    \t\t\r\n\t\t\t\t    \t\t\r\n\t\t    \t\t<div className=\"slider__inner\" style = {{marginLeft : margin}}>\r\n\t\t\t    \t\r\n\t      \t\t\t\t{weatherProps}\t\t\t    \t\t\r\n\r\n\t\t\t    \t</div>\r\n\r\n\t    \t  \t<span className=\"slider__btn slider__right\" onClick={\t\t          \t\t\t\t\t\t\t\r\n\t\t          \t(event: any) => {\r\n\t\t\t    \t\tsetMargin(margin - 183)\r\n\t\t\t    \t\ttoSrart()\r\n\t\t\t    \t}\r\n\t\t\t\t}></span>\t\r\n\t        </div>\r\n\r\n\t\t)\r\n\r\n\t}\r\n\t\r\n\r\nexport default InnerDaily","import * as React from 'react';\r\n\r\n\r\n\r\nconst Empty = () => (\r\n\t<div className=\"forecast__result forecast__result_empty\">\r\n          <img src=\"./images/bg160.svg\" alt=\"empty\" className=\"forecast__img \" />\r\n          <span className=\"forecast__text\">Fill in all the fields and the weather will be displayed</span>\r\n        </div>  \r\n)\r\n\r\n\r\n\r\nexport default Empty","import * as React from 'react';\nimport './App.css';\nimport Header from './layout/Header';\nimport Footer from './layout/Footer';\nimport CardDaily from './components/CardDaily';\nimport CardPast from './components/CardPast';\nimport InnerPast from './components/InnerPast';\nimport InnerDaily from './components/InnerDaily';\nimport Empty from './layout/Empty';\n\nimport {cities} from './data/config';\n\n\n\n\nconst App = () => {\n  const [error, setError] = React.useState('')  \n  const [errorPast, setErrorPast] = React.useState('')\n  const [dataDaily, setDataDaily] = React.useState<any>(null)\n  const [dataPast, setDataPast] = React.useState<any>(null)\n\n  const datesArr: number[] = []\n  const tempArr: number[] = []\n  const iconArr: string[] = []\n\n  const apiRequest = (url: string) => {\n    return fetch(url)\n      .then(response => {\n        if (!response.ok) {        \n          setError(response.statusText)\n        }\n        return response.json() \n      })  \n      .then(result => { \n        if (result.daily) {         \n          for (let i = 0; i<=7; i++) {\n            datesArr.push(result.daily[i].dt) \n            tempArr.push(Math.round(result.daily[i].temp.day))           \n            iconArr.push(result.daily[0].weather[0].icon) \n          } \n          setError('')\n          setDataDaily([          \n           datesArr, \n           tempArr,\n           iconArr\n         ])   \n        }\n      })\n  }\n\n  const apiRequestPast = (url: string) => {\n    return fetch(url)\n      .then(response => {\n        if (!response.ok) { \n          setErrorPast(response.statusText)\n        }\n        return response.json() \n      })  \n      .then(result => { \n        if (result.current) {\n          setErrorPast('')\n          setDataPast([\n            result.current.dt,\n            Math.round(result.current.temp),\n            result.current.weather[0].icon\n          ])\n        }\n      })\n  }\n   \n\n\n  const showDaily = () => {\n    if (error || !dataDaily) {\n      return  <Empty/> \n    }\n    return  <InnerDaily dataResult={dataDaily} />\n  }\n\n  const showPast = () => {\n    if (errorPast || !dataPast) {\n      return  <Empty/> \n    }    \n    return  <InnerPast dataResult={dataPast} />\n  }\n\n\n\n  return (\n\n    <div className=\"page\">\n\n        <Header />\n\n        <section className=\"content\">   \n\n          <div className=\"forecast\">\n\n            <CardDaily \n              title=\"7 Days Forecast\"\n              cities={cities} \n              apiRequest={apiRequest} \n             ></CardDaily>\n\n            {showDaily()}\n\n          </div>\n\n          <div className=\"forecast forecast-past\">\n\n            <CardPast \n              title=\"Forecast for a Date in the Past\" \n              cities={cities}  \n              apiRequest={apiRequestPast}\n            ></CardPast>\n             \n            {showPast()}\n\n          </div>\n\n         </section>\n\n      <Footer />\n\n    </div>\n\n  )\n\n}  \n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}